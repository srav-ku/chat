### **Firebase Config:**
const firebaseConfig = {
    apiKey: "AIzaSyCnYGs6tC6gC5wdem5fsLRqPwGGBFq8lTg",
    authDomain: "chat-now-d1c98.firebaseapp.com",
    databaseURL: "https://chat-now-d1c98-default-rtdb.firebaseio.com",
    projectId: "chat-now-d1c98",
    storageBucket: "chat-now-d1c98.appspot.com",
    messagingSenderId: "103307626261",
    appId: "1:103307626261:web:1176ee5be3e19240a48b1c",
    measurementId: "G-NVJNRWBEDP"
};

---

### **Cloudinary Config:**
const CLOUDINARY_URL = 'https://api.cloudinary.com/v1_1/ds1sfucwb/auto/upload';
const CLOUDINARY_PRESET = 'unsigned_preset';

---


### **Google Apps Script Endpoint for Sheets:**
const APPSCRIPT_URL = 'https://script.google.com/macros/s/AKfycbzWOQyCYP0sLz5_y4OOCUIvqAbQHknC8rgQAEo0_6NS/dev';

---



App Script:

/** ====== CONFIG ====== **/
const SHEET_NAME = 'Messages';
const ACCEPTED_ORIGINS = ['*']; // keep '*' for easiest dev. Lock down later to your domain.
const REQUIRE_TOKEN = false;     // set true if you want to require a shared secret token
const SHARED_TOKEN = 'REPLACE_ME_IF_USED'; // if REQUIRE_TOKEN=true, client must send token

/** ====== HELPERS ====== **/
function getSheet_() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName(SHEET_NAME);
  if (!sheet) {
    sheet = ss.insertSheet(SHEET_NAME);
  }
  // Ensure header exists and in correct order
  const header = [
    'timestamp','messageId','senderId','chatId','groupId','messageType','content',
    'mediaUrl','mediaType','fileSize','fileName','isPrivate','action','mediaId',
    'uploadedBy','flaggedUserId','flaggedBy','reason'
  ];
  const firstRow = sheet.getRange(1,1,1,header.length).getValues()[0];
  const hasHeader = firstRow.join('').toLowerCase().includes('timestamp');
  if (!hasHeader) {
    sheet.clear();
    sheet.appendRow(header);
  }
  return sheet;
}

function normalizeRow_(obj) {
  // Coerce to the exact order (missing fields → empty)
  return [
    obj.timestamp || new Date(),
    obj.messageId || '',
    obj.senderId || '',
    obj.chatId || '',
    obj.groupId || '',
    obj.messageType || '',
    obj.content || '',
    obj.mediaUrl || '',
    obj.mediaType || '',
    obj.fileSize || '',
    obj.fileName || '',
    obj.isPrivate === true || obj.isPrivate === 'true' ? true : false,
    obj.action || 'sent',
    obj.mediaId || '',
    obj.uploadedBy || '',
    obj.flaggedUserId || '',
    obj.flaggedBy || '',
    obj.reason || ''
  ];
}

function appendRow_(obj) {
  const sheet = getSheet_();
  const row = normalizeRow_(obj);
  sheet.appendRow(row);
}

/** ====== CORS (best-effort) ======
 * Apps Script doesn’t support arbitrary headers on ContentService responses.
 * Two strategies:
 *  1) Use fetch with Content-Type "text/plain" to avoid preflight (recommended).
 *  2) Or call doGet with query params for testing from browser.
 * The JSON payload still logs fine.
 */
function jsonOut_(payload) {
  return ContentService
    .createTextOutput(JSON.stringify(payload))
    .setMimeType(ContentService.MimeType.JSON);
}

/** ====== doGet: simple tests from the browser ======
 * Example:
 *  https://script.google.com/macros/s/DEPLOY_ID/exec?mode=test
 *  https://script.google.com/macros/s/DEPLOY_ID/exec?messageId=msg123&senderId=user_abc&chatId=user_abc_user_xyz&messageType=text&content=Hello
 */
function doGet(e) {
  try {
    const params = e && e.parameter ? e.parameter : {};

    if (REQUIRE_TOKEN && params.token !== SHARED_TOKEN) {
      return jsonOut_({ ok:false, error: 'invalid_token' });
    }

    if (params.mode === 'ping' || params.mode === 'test') {
      // health check
      return jsonOut_({ ok:true, message:'Sheets logger up' });
    }

    // If at least messageId or content is present, log a row
    if (params.messageId || params.content) {
      appendRow_({
        timestamp: new Date(),
        messageId: params.messageId,
        senderId: params.senderId,
        chatId: params.chatId,
        groupId: params.groupId,
        messageType: params.messageType,
        content: params.content,
        mediaUrl: params.mediaUrl,
        mediaType: params.mediaType,
        fileSize: params.fileSize,
        fileName: params.fileName,
        isPrivate: params.isPrivate,
        action: params.action,
        mediaId: params.mediaId,
        uploadedBy: params.uploadedBy,
        flaggedUserId: params.flaggedUserId,
        flaggedBy: params.flaggedBy,
        reason: params.reason
      });
      return jsonOut_({ ok:true, appended:true });
    }

    return jsonOut_({ ok:true, info:'Use ?mode=ping to test or send params to append.' });
  } catch (err) {
    return jsonOut_({ ok:false, error: String(err) });
  }
}

/** ====== doPost: production logging from your app ======
 * Send body as TEXT (not JSON) to avoid preflight:
 *   fetch(URL, { method:'POST', headers:{'Content-Type':'text/plain'}, body: JSON.stringify(payload) })
 */
function doPost(e) {
  try {
    const body = e && e.postData && e.postData.contents ? e.postData.contents : '';
    const obj = body ? JSON.parse(body) : {};

    if (REQUIRE_TOKEN && obj.token !== SHARED_TOKEN) {
      return jsonOut_({ ok:false, error:'invalid_token' });
    }

    // Attach server-side timestamp if not present
    if (!obj.timestamp) obj.timestamp = new Date();

    appendRow_((obj));
    return jsonOut_({ ok:true, appended:true });
  } catch (err) {
    return jsonOut_({ ok:false, error:String(err) });
  }
}

sheet columns:

timestamp	messageId	senderId	chatId	groupId	messageType	content	mediaUrl	mediaType	fileSize	fileName	isPrivate	action	mediaId	uploadedBy	flaggedUserId	flaggedBy	reason

